#!/usr/bin/env python3

import os
import sys
import json
import argparse

from functions import *


# parse arguments from the cli. Only for testing/advanced use. All other parameters are handled by cli_input.py
def process_args():
    parser = argparse.ArgumentParser()
    # parser.add_argument('-l', '--local-path', dest="local_path",
    #                     help="Use local files, instead of downloading from the internet (not recommended).")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=True,
                        help="Print more output")
    return parser.parse_args()


def avs_audio(platform):
    # TODO: add support for avs
    print_error("avs audio is not implemented yet!")


def apl_audio():
    # TODO: add a selection to use either sof or avs
    avs_audio("apl")


def sof_audio(platform, username):
    # Install required packages
    install_package("sof-firmware", "firmware-sof-signed", "alsa-sof-firmware")
    install_package("linux-firmware", "linux-firmware", "linux-firmware")
    install_package("pulseaudio", "pulseaudio", "pulseaudio")

    # Copy config files
    cpfile("/etc/eupnea/audio/sof/alsa-reload.service", "/etc/systemd/system/alsa-reload.service")
    cpfile("/etc/eupnea/audio/sof/alsa-sof.conf", "/etc/modprobe.d/alsa-sof.conf")
    cpfile("/etc/eupnea/audio/sof/asound.conf", "/etc/asound.conf")
    cpfile("/etc/eupnea/audio/sof/default.pa", "/etc/pulse/default.pa")
    cpfile("/etc/eupnea/audio/sof/pulseaudio.service", "/usr/lib/systemd/user/pulseaudio.service")

    bash("systemctl daemon-reload")  # Reload systemd configs
    bash("systemctl enable alsa-reload")  # enable custom service

    # Run a few systemctl commands as a regular user
    with open("/etc/eupnea/audio/sof/services.sh", "r"):
        bash(f"su - {username} -s /etc/eupnea/audio/sof/services.sh")


def str_audio():
    print_error("str audio not implemented yet")


def zen2_audio():
    print_error("zen2 audio not implemented yet")


def install_package(arch_package, deb_package, rpm_package):
    if Path("/usr/bin/pacman").exists():
        os.system(f"pacman -S --noconfirm {arch_package}")
    elif Path("/usr/bin/apt").exists():
        os.system(f"apt install -y {deb_package}")
    elif Path("/usr/bin/dnf").exists():
        os.system(f"dnf install -y {rpm_package}")
    else:
        print_error(f"Unknown package manager! Please install {deb_package} using your package manager.")
        exit(1)


if __name__ == "__main__":
    if os.geteuid() == 0 and not path_exists("/tmp/username"):
        print_error("Please start the script as non-root/without sudo")
        exit(1)

    args = process_args()  # process args before elevating to root for better ux
    # TODO: install universal dependencies before elevating to root

    if args.verbose:
        print_warning("Verbosity increased")
        set_verbose(args.verbose)
    # Restart script as root
    if not os.geteuid() == 0:
        # save username
        with open("/tmp/username", "w") as file:
            file.write(bash("whoami").strip())  # get non root username. os.getlogin() seems to fail in chroots
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    # read username
    with open("/tmp/username", "r") as file:
        user_id = file.read()

    # Important message
    print_warning("WARNING: this audio script is not fully functional yet!")

    # Get the board name from dmi
    with open("/sys/devices/virtual/dmi/id/product_name", "r") as dmi:
        device_board = dmi.read().lower().strip()

    with open("/etc/eupnea/audio/board-generations.json", "r") as file:
        boards = json.load(file)

    try:
        match boards[device_board]:
            case "skl":
                avs_audio("skl")
            case "kbl":
                avs_audio("skl")
            case "apl":
                apl_audio()
            case "glk":
                sof_audio("glk", user_id)
            case "whl":
                sof_audio("whl", user_id)
            case "cml":
                sof_audio("cml", user_id)
            case "jsl":
                sof_audio("jsl", user_id)
            case "tgl":
                sof_audio("tgl", user_id)
            case "str":
                str_audio()
            case "zen2":
                zen2_audio()
            case _:
                print_error(f"Unknown/Unsupported chromebook model: {device_board}")
                exit(1)
    except KeyError:
        print_error(f"Unknown/Unsupported chromebook model: {device_board}")
        exit(1)
